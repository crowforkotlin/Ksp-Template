package com.crow.ksp.compiler.generator

import com.crow.ksp.annotation.Path
import com.crow.ksp.annotation.Route
import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.getClassDeclarationByName
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.toTypeName
import java.io.OutputStreamWriter
import java.nio.charset.StandardCharsets

/**
 * ● PathGenerator
 *
 * ● 2024/5/10 9:20
 * @author crowforkotlin
 * @formatter:on
 */
class PathGenerator(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger,
    options: Map<String, String>,
) {
    private val moduleName: String = options["router.moduleName"] ?: options["moduleName"] ?: ""
    private val formattedModuleName: String = moduleName.replace("[^0-9a-zA-Z_]+".toRegex(), "")
    private val generatedPackageName: String = (options["router.packageName"] ?: options["packageName"] ?: PKG) + ".generated"


    private val routes = mutableSetOf<String>()
    @OptIn(KspExperimental::class)
    fun generate(resolver: Resolver, symbols: Sequence<KSAnnotated>) {
        val clazzActivity = resolver.getClassDeclarationByName("android.app.Activity")!!.asType(listOf())
        val clazzRouteCallable = resolver.getClassDeclarationByName("$PKG.RouteCallable")!!.asType(listOf())
        val clazzRouteTable = resolver.getClassDeclarationByName("$PKG.internal.RouteTable")!!.asType(listOf())

        routes.clear()
        val funcSpec = FunSpec.builder("load").addParameter("rt", clazzRouteTable.toTypeName())

        symbols.forEach {
            val annotation = it.getAnnotationsByType(Route::class).first()

            val paths = (arrayOf(annotation.value) + annotation.routes).filter { path ->
                if (path.isEmpty()) {
                    logger.warn("The route path is empty, so skip $it")
                    return@filter false
                }
                return@filter true
            }.toTypedArray()

            if (paths.isEmpty()) {
                logger.warn("The route paths is empty, so skip $it")
                return@forEach
            }

            it.accept(object : KSVisitorVoid() {
                override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
                    val type = classDeclaration.asType(listOf())
                    if (clazzActivity.isAssignableFrom(type) || clazzRouteCallable.isAssignableFrom(type)) {
                        logger.warn("Found $type")

                        routes.addAll(paths)
                        funcSpec.addStatement("rt.add(%T::class.java, %L)", type.toTypeName(), paths.format())

                    } else {
                        logger.warn("Unknown route type, so skip $type")
                    }
                }
            }, Unit)
        }

        val typeSpec = TypeSpec.classBuilder("RouteLoader_$formattedModuleName")
            .addKdoc(WARNINGS)
            .addFunction(funcSpec.build())
            .build()

        val fileSpec = FileSpec.builder(generatedPackageName, "RouteLoader_$formattedModuleName")
            .addType(typeSpec)
            .build()


        fileSpec.writeFile(codeGenerator)
    }

    private fun FileSpec.writeFile(codeGenerator: CodeGenerator) {
        val file = codeGenerator.createNewFile(Dependencies.ALL_FILES, packageName, name)
        OutputStreamWriter(file, StandardCharsets.UTF_8).use(::writeTo)
    }

    private fun Array<String>.format(): String {
        if (isEmpty()) {
            return "null"
        }
        return joinToString("\", \"", "arrayOf(\"", "\")")
    }

    companion object {
        private const val WARNINGS = """
   ***************************************************
   * THIS CODE IS GENERATED BY Router, DO NOT EDIT.  *
   ***************************************************
"""
        private const val PKG = "com.crow.ksp.api"
    }
}