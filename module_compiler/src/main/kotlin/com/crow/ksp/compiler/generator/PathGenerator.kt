package com.crow.ksp.compiler.generator

import com.crow.ksp.annotation.Route
import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.getClassDeclarationByName
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessorEnvironment
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.toTypeName
import java.io.OutputStreamWriter
import java.nio.charset.StandardCharsets

/**
 * ● PathGenerator
 *
 * ● 2024/5/10 9:20
 * @author crowforkotlin
 * @formatter:on
 */
class PathGenerator(private val mEnvironment: SymbolProcessorEnvironment) : KSPLogger by mEnvironment.logger {
    private val mOption get() = mEnvironment.options
    private val mModuleName: String = mOption["router.moduleName"] ?: mOption["moduleName"] ?: ""
    private val mFormattedModuleName: String = mModuleName.replace("[^0-9a-zA-Z_]+".toRegex(), "")
    private val mGeneratedPackageName: String = (mOption["router.packageName"] ?: mOption["packageName"] ?: PKG) + ".generated"


    @OptIn(KspExperimental::class)
    fun generate(resolver: Resolver, symbols: Sequence<KSAnnotated>) {
        val pathList = mutableSetOf<String>()
        val clazzRouteCallable = resolver.getClassDeclarationByName("$PKG.RouteCallable")!!.asType(listOf())
        val clazzRouteTable = resolver.getClassDeclarationByName("$PKG.internal.RouteTable")!!.asType(listOf())
        val funcSpec = FunSpec.builder("load").addParameter("rt", clazzRouteTable.toTypeName())
        symbols.forEach {
            val annotation = it.getAnnotationsByType(Route::class).first()
            val paths = arrayOf(annotation.path).filter { path ->
                if (path.isEmpty()) {
                    warn("The path is empty, so skip $it")
                    return@filter false
                }
                return@filter true
            }.toTypedArray()

            if (paths.isEmpty()) {
                warn("The paths is empty, so skip $it")
                return@forEach
            }

            // 接收者模式
            it.accept(object : KSVisitorVoid() {
                override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
                    val type = classDeclaration.asType(listOf())
                    if (clazzRouteCallable.isAssignableFrom(type)) {
                        warn("Found $type")
                        pathList.addAll(paths)
                        funcSpec.addStatement("rt.add(%T::class.java, %L)", type.toTypeName(), paths.format())
                    } else {
                        warn("Unknown route type, so skip $type")
                    }
                }
            }, Unit)
        }

        val typeSpec = TypeSpec.classBuilder("RouteLoader_$mFormattedModuleName")
            .addKdoc(WARNINGS)
            .addFunction(funcSpec.build())
            .build()

        val fileSpec = FileSpec.builder(mGeneratedPackageName, "RouteLoader_$mFormattedModuleName")
            .addType(typeSpec)
            .build()


        fileSpec.writeFile(mEnvironment.codeGenerator)
    }

    private fun FileSpec.writeFile(codeGenerator: CodeGenerator) {
        val file = codeGenerator.createNewFile(Dependencies.ALL_FILES, packageName, name)
        OutputStreamWriter(file, StandardCharsets.UTF_8).use(::writeTo)
    }

    private fun Array<String>.format(): String {
        if (isEmpty()) {
            return "null"
        }
        return joinToString("\", \"", "arrayOf(\"", "\")")
    }

    companion object {
        private const val WARNINGS = """
   ***************************************************
   * THIS CODE IS GENERATED BY Router, DO NOT EDIT.  *
   ***************************************************
"""
        private const val PKG = "com.crow.ksp.api"
    }
}